import time, psutil, requests, subprocess, random, shutil
from pythonosc.udp_client import SimpleUDPClient
from datetime import datetime

ip = "127.0.0.1"
#ip2 = "192.168.1.1" —Ä–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ç—å –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—å –∫B–µ—Å—Ç (–∑–∞–º–µ–Ω–∏—Ç–µ –∞–π–ø–∏)
port = 9000
client = SimpleUDPClient(ip, port)
#client2 = SimpleUDPClient(ip2, port) —Ä–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ç—å –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—å –∫B–µ—Å—Ç

# - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ -
ENABLE_COMMIT = True
ENABLE_RANDOM = True
ENABLE_WEATHER = True
ENABLE_HARDWARE = True
ENABLE_WINDOW = True
ENABLE_MUSIC = True

def get_git():
    try:
        return subprocess.check_output(["git", "rev-parse", "HEAD"]).decode("utf-8").strip()
    except subprocess.CalledProcessError:
        return "–ì–∏—Ç —à–∞—Ä–º–∞–Ω–∏—Ç, —Ä–µ—Å—Ç–∞—Ä—Ç–∞–π –ø—Ä–æ–≥—É."
git_commit = get_git()
city = "–ú–æ—Å–∫–æ—É"

# - –ü–æ–≥–æ–¥–∞ -
#–µ—Å–ª–∏ –º–æ–¥—É–ª—å –ø–æ–≥–æ–¥bi –Ω–µ –ø–∏—à–µ—Ç –∏–∫–æ–Ω–∫—É —Ç–æ —Ç–æ–≥–¥–∞ –¥–µ–ª–∞–π—Ç–µ —Ç–æ–∂–µ —á—Ç–æ –∏ —Å–Ω–∏–∑—É —Ç–æ–ª—å–∫–æ "–∏–Ω–≥–ª–∏—à –Ω–µ–π–º": "–∏–∫–æ–Ω–∫–∞"
weather_icons = {
    "sunny":"‚òÄÔ∏è","clear":"üåô","partly cloudy":"‚õÖ","cloudy":"‚òÅÔ∏è",
    "overcast":"üå•","mist":"üå´","patchy rain possible":"üå¶",
    "light rain":"üåß","heavy rain":"üåß","snow":"‚ùÑÔ∏è","thunder":"üå©",
    "Rain with thunderstorm": "‚õàÔ∏è",
}
#–µ—Å–ª–∏ –º–æ–¥—É–ª—å –ø–æ–≥–æ–¥bi –Ω–∞ –∏–Ω–≥–ª–∏—à–µ –ø–∏—à–µ—Ç –æ–ø—è—Ç—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–ø–∏cbiB–∞–π—Ç–µ "–∏–Ω–≥–ª–∏—à –Ω–µ–π–º": "—Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µB–æ–¥" (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø—è—Ç—É—é)
weather_translate = {
    "sunny":"–°–æ–ª–Ω–µ—á–Ω–æ","clear":"–Ø—Å–Ω–æ","partly cloudy":"–ü–µ—Ä–µ–º. –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
    "cloudy":"–û–±–ª–∞—á–Ω–æ","overcast":"–ü–∞—Å–º—É—Ä–Ω–æ","mist":"–¢—É–º–∞–Ω",
    "patchy rain possible":"–í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å","light rain":"–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
    "heavy rain":"–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å","snow":"–°–Ω–µ–≥","thunder":"–ì—Ä–æ–∑–∞",
    "Rain with thunderstorm":"–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π",
}
#—á—Ç–æ–± —Å–∞–º–æ–º—É —Ç–µ–∫—Å—Ç –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å —Å—é–¥–∞ –¥–µ–ª–∞–µ–º —Ç–∞–∫:—Å—Ç–∞B–∏–º –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ –ø—Ä–æ—à–ªbi–º —Ç–µ–∫—Å—Ç–æ–º –µ—Å–ª–∏ –Ω–µ —Å—Ç–æ–∏—Ç –∏ –ø–∏—à–µ–º "—Ç–µ–∫—Å—Ç"
custom_messages = ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æB–∞—Ç—å B pybox-vrc","–≠—Ç–æ —Ä–∞–Ω–¥–æ–ºbi–π —Ç–µ–∫—Å—Ç","tinyurl.com/pyboxvrc","—ÅB–æ–π —Ç–æ–∂–µ –º–æ–∂–Ω–æ B—Å—Ç–∞B–∏—Ç—å, –∑–∞–≥–ª—è–Ω–∏ B –∫–æ–¥, —Å—Ç—Ä–æ–∫–∞ 44"]
if shutil.which("playerctl") is None:
    print("[‚ùå] playerctl –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º—É–∑—ã–∫–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    ENABLE_MUSIC = False
if shutil.which("kdotool") is None:
    print("[‚ùå] kdotool –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞)")
    ENABLE_WINDOW = False




# - –ú–æ–¥—É–ª—è–∫–∏ —Ä–∞–∑–Ωbi–µ
#get_gpu —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∂–æ–ø—É
def get_gpu():
    try:
        out = subprocess.check_output(
            ["nvidia-smi","--query-gpu=utilization.gpu,memory.used,memory.total","--format=csv,noheader,nounits"],
            encoding="utf-8"
        )
        u, used, total = out.strip().split(", ")
        return int(u), int(used), int(total)
    except:
        return None, None, None
#—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –∂–æ–ø—É –µ—Å–ª–∏ –ø—Ä–æB–∞–π–¥–µ—Ä –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Ç–æ–∂–µ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
def get_weather():
    try:
        data = requests.get(f"https://wttr.in/{city}?format=j1", timeout=5).json()
        t = data["current_condition"][0]["temp_C"]
        f = data["current_condition"][0]["FeelsLikeC"]
        desc = data["current_condition"][0]["weatherDesc"][0]["value"].lower()
        icon = next((e for k,e in weather_icons.items() if k.lower() in desc), "‚ùì")
        return f"{icon} {weather_translate.get(desc, desc.capitalize())} {t}¬∞C (–æ—â—É—â. {f}¬∞C)"
    except:
        return "üåê –£–ø—Å! wttr.in –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è."
# - –æ—á–µ–Ω—å privacy invasive –º–æ–¥—É–ª—å, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫—ÄbiB–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏/–∏–ª–∏ –æ—Ç–∫—ÄbiB–∞—Ç—å —á—Ç–æ—Ç–æ —á—Ç–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –ø—É–±–ª–∏–∫—É
def get_window():
    if shutil.which("kdotool") is None:
        return "‚ö†Ô∏è kdotool –Ω–µ –Ω–∞–π–¥–µ–Ω"  # fallback –µ—Å–ª–∏ kdotool –Ω–µ—Ç
    try:
        win_id = subprocess.check_output(
            ["kdotool", "getactivewindow"], encoding="utf-8"
        ).strip()
        title = subprocess.check_output(
            ["kdotool", "getwindowname", win_id], encoding="utf-8"
        ).strip()
        return f"üíª {title}" if title else "üíª–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
    except:
        return "–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª"
# - –æ—á–µ–Ω—å privacy invasive –º–æ–¥—É–ª—å, –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–º–æ—Ç—Ä–µ—Ç—å/c–ª—É—à–∞—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ωbi–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ –ø—É–±–ª–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞ —ç—Ç–æ B–∫–ª—é—á–µ–Ω–æ
def get_music():
    try:
        status = subprocess.check_output(["playerctl", "status"],encoding="utf-8",stderr=subprocess.DEVNULL).strip()
        if status.lower() in ("playing", "paused"):
            artist = subprocess.check_output(["playerctl", "metadata", "artist"],encoding="utf-8",stderr=subprocess.DEVNULL).strip()
            title = subprocess.check_output(["playerctl", "metadata", "title"],encoding="utf-8",stderr=subprocess.DEVNULL).strip()
            return f"üéµ {artist} - {title}"
        else:
            return None
    except subprocess.CalledProcessError:
        return None


weather_info = get_weather()
last_weather_update = time.time()
while True:
    if time.time() - last_weather_update > 120:
        weather_info = get_weather()
        last_weather_update = time.time()

    cpu = psutil.cpu_percent()
    ram = psutil.virtual_memory().percent
    temp = psutil.sensors_temperatures()
    gpu_util, vram_used, vram_total = get_gpu()
    cpu_temp = temp["coretemp"][0].current if "coretemp" in temp else "?"

    parts = []
    #–ª–æ–º–∞–µ—Ç winDowz —Å–∞–ø–ø–æ—Ä—Ç, –∞ –∫–æ–º—É –æ–Ω –Ω—É–∂–µ–Ω? –∏–¥–∏—Ç–µ –∂—Ä–∏—Ç–µ –º–∞–≥–∏–∫—á–∞—Ç–±–æ–∫—Å
    if ENABLE_HARDWARE:
        hw_msg = f"CPU {cpu}% üå°{cpu_temp}¬∞C RAM {ram}%"
        if gpu_util is not None:
            hw_msg += f"üéÆGPU {gpu_util}% VRAM {vram_used}/{vram_total}MB"
        parts.append(hw_msg)
    if ENABLE_WEATHER: parts.append(weather_info)
    if ENABLE_RANDOM: parts.append(f"üí¨ {random.choice(custom_messages)}")
    if ENABLE_COMMIT: parts.append(git_commit)
    if ENABLE_WINDOW: parts.append(get_window())
    if ENABLE_MUSIC:
        m = get_music()
        if m: parts.append(m)
    parts.append(f"üïí {datetime.now().strftime('%H:%M')}")

    # - –∫—Ä—É—Ç–æ–π fix –¥–ª—è –ª–∏–º–∏—Ç–∞ —Ç–µ–∫—Å—Ç–∞ -
    drop_order = ["COMMIT", "TIME", "WINDOW", "MUSIC", "WEATHER", "HARDWARE"]
    while drop_order:
        total_len = sum(len(p) for p in parts) + len(parts) - 1
        if total_len <= 144:
            break
        drop = drop_order.pop(0)
        if drop == "COMMIT" and ENABLE_COMMIT:
            parts = [p for p in parts if p != git_commit]
        elif drop == "TIME":
            parts = [p for p in parts if not p.startswith("üïí")]
        elif drop == "WINDOW":
            parts = [p for p in parts if not p.startswith("ü™ü")]
        elif drop == "MUSIC":
            parts = [p for p in parts if not (p and p.startswith("üéµ"))]
        elif drop == "WEATHER" and ENABLE_WEATHER:
            parts = [p for p in parts if p != weather_info]
        elif drop == "HARDWARE" and ENABLE_HARDWARE:
            parts = [p for p in parts if not ("CPU" in p or "GPU" in p)]
    final_msg = "\n".join(parts)
    client.send_message("/chatbox/input", [final_msg, True])
    #client2.send_message("/chatbox/input", [final_msg, True]) —Ä–∞–∑–∫–æ–º–µ–Ω—Ç–∏—Ç—å –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—å –∫B–µ—Å—Ç
    time.sleep(2.5)
